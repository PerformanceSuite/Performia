================================================================================
SONG MAP SCHEMA VALIDATION RESULTS
Generated: 2025-09-30
================================================================================

EXECUTIVE SUMMARY
-----------------
Status: ✓ PASS - All Song Maps are schema-compliant
Files Validated: 1
Valid: 1
Invalid: 0

VALIDATOR SCRIPT
----------------
Location: /Users/danielconnolly/Projects/Performia/backend/validate_song_map.py
Schema: /Users/danielconnolly/Projects/Performia/backend/schemas/song_map.schema.json

Usage:
  python validate_song_map.py                    # Validate default Song Map
  python validate_song_map.py --all              # Validate all Song Maps
  python validate_song_map.py <path/to/file>     # Validate specific file


VALIDATION DETAILS
------------------

File: complete_test.song_map.json
Status: ✓ VALID
Schema Compliance: PASS

Required Fields (All Present):
  ✓ id
  ✓ duration_sec
  ✓ tempo
  ✓ beats
  ✓ downbeats
  ✓ meter
  ✓ chords
  ✓ lyrics

Optional Fields (Present):
  ✓ key
  ✓ sections
  ✓ performance (melody, bass)
  ✓ provenance


WARNINGS DETECTED
-----------------

1. CHORD WITH ZERO DURATION
   Issue: Chord at index 1 has start == end (both 8.0s)
   Data: {'start': 8.0, 'end': 8.0, 'label': 'F:maj', 'conf': 0.63}
   Impact: This chord represents a single moment, not a time range
   Recommendation: This appears to be an edge case at the end of the song.
                   Consider filtering out chords with zero duration in the
                   chord recognition service, or documenting that zero-duration
                   chords are valid for instantaneous chord changes.

2. EMPTY LYRICS ARRAY
   Issue: lyrics array is empty (no lyrics detected)
   Data: "lyrics": []
   Impact: The Living Chart UI may not display lyric synchronization
   Note: This is expected for instrumental tracks or test audio without vocals.
         The test file (complete_test) appears to be a test/instrumental track.
   Recommendation: No action needed unless lyrics are expected for this file.

3. SCHEMA MISMATCH - SECTIONS CONFIDENCE FIELD
   Issue: Section has 'confidence' field not defined in schema
   Data: "sections": [{"start": 0.534, "end": 6.548, "label": "intro", "confidence": 0.85}]
   Impact: Schema doesn't recognize the 'confidence' field for sections
   Recommendation: Update schema to include optional 'confidence' field for sections:

   JSON Schema Update:
   "sections": {
     "type": "array",
     "items": {
       "type": "object",
       "properties": {
         "start": {"type": "number"},
         "end": {"type": "number"},
         "label": {"type": "string"},
         "confidence": {"type": "number"}  // ADD THIS
       },
       "required": ["start", "end", "label"]
     }
   }


SEMANTIC VALIDATION CHECKS
---------------------------

The validator performs the following semantic checks beyond schema validation:

✓ Timing Consistency
  - Beats/downbeats don't exceed duration
  - Chord times don't exceed duration
  - Section times don't exceed duration
  - Lyric times don't exceed duration

✓ Time Range Validity
  - start <= end for all timed elements
  - No negative durations

✓ Beat Hierarchy
  - Downbeats are subset of beats
  - No orphaned downbeats

✓ Confidence Ranges
  - All confidence values in [0, 1]
  - Checked for: tempo, chords, keys

✓ Data Presence
  - Warns if required arrays are empty
  - Detects missing expected data


ISSUES TO FIX
--------------

Priority: MEDIUM
Issue: Schema missing 'confidence' field for sections
File: /Users/danielconnolly/Projects/Performia/backend/schemas/song_map.schema.json
Fix: Add "confidence": {"type": "number"} to sections items properties

Priority: LOW
Issue: Zero-duration chord at song boundary
File: Chord recognition service output
Fix: Either document as valid behavior or filter in post-processing


RECOMMENDATIONS
---------------

1. UPDATE SCHEMA
   Add 'confidence' field to sections definition to match actual data structure
   being generated by the structure analysis service.

2. CHORD BOUNDARY HANDLING
   Clarify whether zero-duration chords are:
   a) Valid (instantaneous chord changes)
   b) Invalid (should be filtered)
   c) Edge cases (only at song boundaries)

3. EMPTY LYRICS HANDLING
   Document expected behavior for instrumental tracks:
   - Should lyrics array be empty [] or omitted entirely?
   - How should Living Chart UI handle missing lyrics?

4. ADD VALIDATION TO CI/CD
   Integrate validate_song_map.py into automated testing:
   - Run on all generated Song Maps
   - Fail build on schema validation errors
   - Warn on semantic issues

5. EXPAND SEMANTIC VALIDATION
   Consider adding checks for:
   - Chord progression validity (music theory)
   - Key/chord compatibility
   - Tempo curve monotonicity
   - Section label standardization (verse, chorus, bridge, etc.)


VALIDATOR FEATURES
------------------

The validation script provides:

✓ JSON Schema Validation (Draft-07)
  - Validates structure against official schema
  - Reports missing required fields
  - Reports type mismatches

✓ Semantic Validation
  - Timing consistency checks
  - Data range validation
  - Cross-field validation
  - Domain-specific rules

✓ Detailed Error Reporting
  - Field path to error location
  - Error message with context
  - Actual value causing error

✓ Warnings vs Errors
  - Errors: Schema violations (fail validation)
  - Warnings: Semantic issues (pass validation but may need attention)

✓ Batch Processing
  - Validate single file
  - Validate all Song Maps
  - Summary reports


NEXT STEPS
----------

1. Review and address schema mismatch for sections.confidence
2. Document chord boundary behavior
3. Integrate validator into test suite
4. Create validation hook for Song Map generation pipeline
5. Add validation to packager service before final output


================================================================================
END OF VALIDATION REPORT
================================================================================
