services:
  postgres:
    image: postgres:16-alpine
    container_name: commandcenter_db_dev
    environment:
      POSTGRES_DB: commandcenter_dev
      POSTGRES_USER: commandcenter
      POSTGRES_PASSWORD: ${DB_PASSWORD:-devpassword}
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U commandcenter"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - commandcenter_dev

  redis:
    image: redis:7-alpine
    container_name: commandcenter_redis_dev
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - commandcenter_dev

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: base
    container_name: commandcenter_backend_dev
    environment:
      DATABASE_URL: postgresql://commandcenter:${DB_PASSWORD:-devpassword}@postgres:5432/commandcenter_dev
      SECRET_KEY: ${SECRET_KEY:-dev-secret-key-change-in-production}
      RAG_STORAGE_PATH: /app/rag_storage
      CHROMADB_PATH: /app/rag_storage/chromadb
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      GITHUB_TOKEN: ${GITHUB_TOKEN}
      SLACK_TOKEN: ${SLACK_TOKEN:-}
      REDIS_URL: redis://redis:6379
      PYTHONUNBUFFERED: 1
      DEBUG: "true"
    volumes:
      - ./backend:/app
      - rag_dev_storage:/app/rag_storage
      - ./backend/output:/app/output
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - commandcenter_dev
    command: uvicorn api.server:app --host 0.0.0.0 --port 8000 --reload

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: commandcenter_frontend_dev
    environment:
      VITE_API_URL: http://localhost:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - commandcenter_dev

volumes:
  postgres_dev_data:
    driver: local
  rag_dev_storage:
    driver: local
  redis_dev_data:
    driver: local

networks:
  commandcenter_dev:
    driver: bridge
